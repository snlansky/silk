// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package protos;

import "common.proto";

message SignedProposal {
    // The bytes of Proposal
    bytes proposal_bytes = 1;

    // Signature over proposalBytes; this signature is to be verified against
    // the creator identity contained in the header of the Proposal message
    // marshaled as proposalBytes
    bytes signature = 2;
}

message Proposal {
    // The header of the proposal. It is the bytes of the Header
    Header header = 1;

    // The payload of the proposal as defined by the type in the proposal
    // ContractProposalPayload bytes
    bytes payload = 2;
}

//-------- the Contract Proposal -----------
message ContractProposalPayload {
    ContractID contract_id = 1;
    ContractInput input  = 2;
    map<string, bytes> TransientMap = 3;
    int32 timeout = 4;
}

message ContractID {
    //all other requests will use the name (really a hashcode) generated by
    //the deploy transaction
    string name = 1;
}

// Carries the contract function and its arguments.
message ContractInput {
    repeated bytes args  = 1;
    map<string, bytes> decorations = 2;

    // is_init is used for the application to signal that an invocation is to be routed
    // to the legacy 'Init' function for compatibility with contracts which handled
    // Init in the old way.  New applications should manage their initialized state
    // themselves.
    bool is_init = 3;
}

message ContractEvent {
    string contract = 1;
    string tx_id = 2;
    string event_name = 3;
    bytes payload = 4;
}
